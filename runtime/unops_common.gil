#internal

proc i__unops_negb (val) {
       goto [ l-nth(val, 1.) = 0i ] ctn utd;
  ctn: ret := {{ "int32", 1i }};
       return;
  utd: ret := {{ "int32", 0i }};
       return
};

(** casting involves three processes:
  * 1. Casting capabilities: "i__unops_cast"(ni, cap);
  *    Casting capabilities changes the cap "offsiz" value
  * 2. Casting primitive values: "i__unops_cast"("type", value)
  *    Casting values internally calls [cast_val].
  * 3. Casting anything to _Bool: "i__unops_cast"("_Bool", value);
  *    needed for assert(a);
  *)
proc i__unops_cast (typ, val) {
       (* case 1 *)
       goto [ typeOf(typ) = Int ] nct tptr;
 tptr: goto [ typ = "_Bool" ] bct nptr;
  bct: asdf := "i__is_cap"(val);
       goto [ asdf ] t1 t2;
       (* case 3 *)
   t1: tmp := [NULL]();
       ret := "i__binops_cmp_neq"(val, tmp);
       return;
   t2: ret := "i__binops_cmp_neq"(val, {{ l-nth(val, 0.), 0i }});
       return;
  nct: ptrt := "i__is_cap"(val);
       goto [ ptrt ] pend feil;
 pend: ret := {{ l-nth(val, 0.), l-nth(val, 1.), l-nth(val, 2.), l-nth(val, 3.), 
                 l-nth(val, 4.), l-nth(val, 5.), l-nth(val, 6.), l-nth(val, 7.), 
                 l-nth(val, 8.), l-nth(val, 9.), l-nth(val, 10.), typ }};
       return;
       (* case 2 *)
 nptr: goto [ typeOf(typ) = Str ] tval feil;
 tval: ret := [cast_val](typ, val);
       return;
 feil: fail[comparison]("Cast not supported or invalid arg")
};

proc i__is_cap (cap) {
       goto [ l-len(cap) = 12i ] nxt utd;
  nxt: goto [( (typeOf(l-nth(cap, 0.)) = Obj) and
               (typeOf(l-nth(cap, 1.)) = Int) and
               (typeOf(l-nth(cap, 2.)) = Int) and
               (typeOf(l-nth(cap, 3.)) = Int) and
               (typeOf(l-nth(cap, 4.)) = Bool) and
               (typeOf(l-nth(cap, 5.)) = Bool) and
               (typeOf(l-nth(cap, 6.)) = Bool) and
               (typeOf(l-nth(cap, 7.)) = Bool) and
               (typeOf(l-nth(cap, 8.)) = Bool) and
               (typeOf(l-nth(cap, 9.)) = Bool) and
               (typeOf(l-nth(cap, 10.)) = Bool) and
               (typeOf(l-nth(cap, 11.)) = Int) )] ctn utd;
  ctn: ret := true;
       return;
  utd: ret := false;
       return
};

